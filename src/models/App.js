// Generated by CoffeeScript 1.10.0
var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

window.App = (function(superClass) {
  extend(App, superClass);

  function App() {
    return App.__super__.constructor.apply(this, arguments);
  }

  App.prototype.initialize = function() {
    var deck;
    console.count();
    this.set('deck', deck = new Deck());
    this.set('playerHand', deck.dealPlayer());
    this.set('dealerHand', deck.dealDealer());
    this.get('playerHand').on('over', (function(_this) {
      return function() {
        return _this.gameOver();
      };
    })(this));
    this.trigger('dealAgain', this);
  };

  App.prototype.dealAgain = function() {
    var deck;
    return this.set('deck', deck = new Deck());
  };

  App.prototype.stand = function() {
    this.get('dealerHand').reveal();
    while (this.get('dealerHand').minScore() < 17) {
      setInterval(function() {
        return get('dealerHand').hit()(1000);
      });
    }
    this.gameOver();
  };

  App.prototype.gameOver = function() {
    this.set('gameResult', this.get('dealerHand').minScore() > 21 ? "Dealer busted, Player wins!" : this.get('playerHand').minScore() > 21 ? "Player busted, Player loses" : this.get('playerHand').minScore() === 21 ? "BLACKJACK, Player wins!" : this.get('playerHand').minScore() > this.get('dealerHand').minScore() ? "Player wins!" : "Player loses");
    this.trigger('gameOver', this);
  };

  return App;

})(Backbone.Model);
